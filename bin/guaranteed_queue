#!/usr/bin/env ruby

begin
  require 'guaranteed_queue'
rescue LoadError
  require 'rubygems'
  require 'guaranteed_queue'
end

require 'optparse'

$0 = "guaranteed_queue"

module GQ
  Logger = GuaranteedQueue::Logger
end

pid_path = "#{Dir.pwd}/tmp/pids/guaranteed_queue.pid"

OptionParser.new do |opts|
  opts.banner = "Usage: guaranteed_queue [stop] [--pidfile='']"

  opts.on('-p', '--pidfile [PIDFILE]', "Pidfile") do |pidfile|
    pid_path = pidfile
  end

end.parse!

subcommand = ARGV.shift

case subcommand
when 'stop'
  if File.exists? pid_path
    %x{kill `cat #{pid_path}`}
    GQ::Logger.info "Killed pid #{pid}"
    FileUtils.rm(pid_path)
  else
    GQ::Logger.info "Not running or no pid"
  end
  exit!
else # or 'start'
  # Write pid file to tmp
  File.open(pid_path, "w") {|f| f.write($$) }

  $LOAD_PATH.push File.dirname(__FILE__) + '/../lib'

  begin

    if File.exists? rails_path = "#{Dir.pwd}/config/environment.rb"
      require 'rails'
      GQ::Logger.info "Starting GuaranteedQueue for Rails app in #{Dir.pwd}."
      GQ::Logger.info "Loading application..."
      require rails_path  
      ::Rails.application.load_tasks
    else
      GQ::Logger.info 'Not running as part of a Rails application.'
    end

    GuaranteedQueue::Manager.run!

  rescue SystemExit, Interrupt
    
    GQ::Logger.info "[GuaranteedQueue] Quitting..."
    FileUtils.rm pid_path

  end
end
